<project name="DeepaMehta" default="-default" basedir=".">

	<description>
		DeepaMehta build file
	</description>

	<import file="config.xml" />

	<import file="${db-specific}/${db.create-db}" />
	<import file="${db-specific}/${db.drop-db}" />

	<import file="build-development.xml" optional="true" />
	<import file="setup.xml" />

	<path id="dmapps">
		<pathelement location="${examples}/movies/MoviesTopics.jar" />
		<!-- configure this -->
		<pathelement location="${examples}/artfacts/ArtfactsTopics.jar" />
		<!-- configure this -->
		<pathelement location="${examples}/hilfelotse/HilfelotseTopics.jar" />
		<!-- configure this -->
		<pathelement location="${examples}/messageboard/messageboard.jar" />
		<!-- configure this -->
		<pathelement location="${examples}/kompetenzstern/kompetenzstern.jar" />
		<!-- configure this -->
		<pathelement location="${appspath}/Kiezatlas/trunk/kiezatlas.jar" />
		<!-- configure this -->
		<pathelement location="${appspath}/TeenKom/teenkom.jar" />
		<!-- configure this -->
		<pathelement location="${appspath}/OLAP/olap.jar" />
		<!-- configure this -->
		<pathelement location="${appspath}/Importer/importer.jar" />
		<!-- configure this -->
		<pathelement location="${appspath}/DeepaMehta Coordination/coordination-platform.jar" />
		<!-- configure this -->
	</path>

	<target name="-default">
		<for list="${main-targets}" param="target" trim="true">
			<sequential>
				<antcall target="@{target}" />
			</sequential>
		</for>
	</target>

	<!-- Install -->

	<target name="install" description="initialises the database">
		<antcallback target="-initdb" return="do.db.abort" />
		<!-- example applications -->
		<antcall target="-installexamples" />
	</target>
	<target name="uninstall" description="drops all databases">
		<antcall target="-dropdb" />
		<!-- example applications -->
		<antcall target="-uninstallexamples" />
	</target>
	<target name="-installexamples" depends="-testsyspass">
		<ant target="-call-examples">
			<property name="target" value="install" />
		</ant>
	</target>
	<target name="-uninstallexamples" depends="-testsyspass">
		<ant target="-call-examples">
			<property name="target" value="uninstall" />
		</ant>
	</target>

	<!-- Web-related tasks -->
	<target name="-installweb-ask" unless="web.deploy.do" />
	<target name="-installweb-unless" unless="do.web.deploy" depends="-installweb-ask">
		<echo>
.-----------------------------------.
| The deployment is not configured! |
|-----------------------------------|
| Please run the config target if   |
| you want to have your DeepaMehta  |
| installed into your tomcat.       |
`-----------------------------------Â´
		</echo>
	</target>
	<target name="-installweb-if" if="do.web.deploy" depends="-installweb-ask">
		<!-- copy shared libraries -->
		<antcall target="-deploylibs" />
		<copy todir="${web.lib.dir}">
			<fileset dir="${dm.base-dir}">
				<include name="${db.libs}" />
			</fileset>
		</copy>
		<copy file="${libpath}/avalon-framework.jar" todir="${web.lib.dir}" />
		<copy file="${libpath}/commons-fileupload-1.0.jar" todir="${web.lib.dir}" />
		<copy file="${libpath}/spring-core.jar" todir="${web.lib.dir}" />
		<copy file="${libpath}/googleapi.jar" todir="${web.lib.dir}" />
		<!-- deploy web applications -->
		<ant target="-call-examples-web">
			<property name="target" value="deploy" />
		</ant>
	</target>
	<target name="-installweb" depends="-installweb-if,-installweb-unless" />

	<target name="deploy" depends="-installweb" description="Does everything to setup your Tomcat." />

	<target name="-deploylibs" if="do.web.deploy">
		<copy file="${server}/DeepaMehtaService.jar" todir="${web.lib.dir}" />
		<copy file="${server}/DeepaMehtaTopics.jar" todir="${web.lib.dir}" />
	</target>

	<!-- The target createdb has been "outsourced" to ${db.create-db}-->
	<!-- The target dropdb has been "outsourced" to ${db.drop-db}-->

	<target name="-createtables" unless="do.db.abort" depends="-createdb">
		<sql driver="${db.driver}" url="${db.url}" userid="${db.user}" password="${db.password}" classpathref="javalibs" autocommit="${db.autocommit}">
			<fileset dir="${db-specific}">
				<include name="${db.tables}" />
			</fileset>
			<fileset dir="${db-specific}">
				<include name="${db.close-session}" />
			</fileset>
		</sql>
		<antcall target="-optimize" />
	</target>

	<target name="-optimize">
		<sql driver="${db.driver}" url="${db.url}" userid="${db.user}" password="${db.password}" classpathref="javalibs" autocommit="${db.autocommit}">
			<fileset dir="${db-specific}">
				<include name="${db.optimize}" />
			</fileset>
			<fileset dir="${db-specific}">
				<include name="${db.close-session}" />
			</fileset>
		</sql>
	</target>

	<target name="-initdb" unless="do.db.abort" depends="-createtables">
		<sql driver="${db.driver}" url="${db.url}" userid="${db.user}" password="${db.password}" classpathref="javalibs" autocommit="${db.autocommit}">
			<fileset dir="${db}">
				<include name="cm.sql" />
				<include name="email.sql" />
				<include name="auth.sql" />
				<include name="webcrawler.sql" />
				<include name="whois.sql" />
			</fileset>
			<fileset dir="${db-specific}">
				<include name="${db.close-session}" />
			</fileset>
		</sql>
		<sql driver="${db.driver}" url="${db.url}" userid="${db.user}" password="${db.password}" classpathref="javalibs" autocommit="${db.autocommit}">
			<fileset dir="${db}/patches">
				<include name="names.sql" />
				<include name="help.sql" />
			</fileset>
			<fileset dir="${db-specific}">
				<include name="${db.close-session}" />
			</fileset>
		</sql>
		<antcall target="-optimize" />
	</target>

	<target name="-droptables">
		<sql driver="${db.driver}" url="${db.url}" userid="${db.user}" password="${db.password}" classpathref="javalibs" autocommit="${db.autocommit}">
			<fileset dir="${db-specific}">
				<include name="${db.drop-tables}" />
			</fileset>
			<fileset dir="${db-specific}">
				<include name="${db.close-session}" />
			</fileset>
		</sql>
	</target>

	<target name="reset">
		<echo message="You are about to reset the database ${db.name} (user '${db.user}', password '${db.password}')." />
		<echo message="If you want reset another database, type 'n' and edit config.xml (section 'Database')" />
		<echo message="or use command line options -Ddb.name=... -Ddb.user=... -Ddb.password=..." />
		<input message="Continue? " validargs="y,n" addproperty="do.reset" />
		<condition property="do.abort">
			<equals arg1="${do.reset}" arg2="n" />
		</condition>
		<fail if="do.abort" message="==> Aborted by user -- revisit with 'ant [options] reset'" />
		<antcall target="droptables" />
		<antcall target="createtables" />
		<antcall target="initdb" />
	</target>

	<target name="patchdb">
		<echo message="You are about to apply the patch ${patch} the database ${db.name} (user '${db.user}', password '${db.password}')." />
		<echo message="If you want patch another database, type 'n' and edit config.xml (section 'Database')" />
		<echo message="or use command line options -Ddb.name=... -Ddb.user=... -Ddb.password=... -Dpatch=..." />
		<input message="Continue? " validargs="y,n" addproperty="do.patch" />
		<condition property="do.abort">
			<equals arg1="${do.patch}" arg2="n" />
		</condition>
		<fail if="do.abort" message="==> Aborted by user -- revisit with 'ant [options] patchdb'" />
		<sql driver="${db.driver}" url="${db.url}" userid="${db.user}" password="${db.password}" classpathref="javalibs" autocommit="${db.autocommit}" onerror="continue">
			<fileset dir=".">
				<include name="${patch}" />
			</fileset>
			<fileset dir="${db-specific}">
				<include name="${db.close-session}" />
			</fileset>
		</sql>
		<antcall target="-optimize" />
	</target>

	<!-- Run -->

	<target name="dm" description="runs the monolithic DeepaMehta application, default instance">
		<java classname="de.deepamehta.service.DeepaMehta" dir="${client}" fork="true">
			<classpath>
				<pathelement location="${client}/DeepaMehta.jar" />
				<path refid="dmapps" />
				<path refid="javalibs" />
			</classpath>
			<sysproperty key="java.endorsed.dirs" path="${endorsedpath}" />
			<arg value="${dm.instance}" />
		</java>
	</target>

	<target name="dms" description="runs the DeepaMehta server">
		<java classname="de.deepamehta.service.DeepaMehtaServer" dir="${client}" fork="true">
			<classpath>
				<pathelement location="${server}/DeepaMehtaService.jar" />
				<pathelement location="${server}/DeepaMehtaTopics.jar" />
				<path refid="dmapps" />
				<path refid="javalibs" />
			</classpath>
			<sysproperty key="java.endorsed.dirs" path="${endorsedpath}" />
			<arg value="${dm.instance}" />
		</java>
	</target>

	<target name="dmc" description="runs the DeepaMehta client, connects to local server">
		<echo message="Connecte zu ${dm.host}:${dm.port}" />
		<java classname="de.deepamehta.client.DeepaMehtaClient" dir="${client}" fork="true">
			<classpath>
				<pathelement location="${client}/DeepaMehtaClient.jar" />
			</classpath>
			<arg value="${dm.host}:${dm.port}" />
		</java>
	</target>

	<!-- Fix -->

	<target name="fixdb" description="fixes invalid HTML">
		<java classname="de.deepamehta.service.db.DBFix" dir="${client}" fork="true">
			<classpath>
				<pathelement location="${server}/DeepaMehtaService.jar" />
				<path refid="javalibs" />
			</classpath>
			<arg value="${dm.instance}" />
		</java>
	</target>

	<!-- Herlper Targets -->

	<target name="-testsyspass">
		<var name="withsyspass" unset="true" />
		<condition property="withsyspass" value="true">
			<isset property="db.syspass" />
		</condition>
	</target>

	<target name="-call-examples" depends="-call-examples-noweb,-call-examples-web" />
	<target name="-call-examples-noweb" depends="-call-examples-both-intern,-call-examples-noweb-intern,-call-external-apps" />
	<target name="-call-examples-web" depends="-call-examples-both-intern,-call-examples-web-intern  ,-call-external-apps" />

	<target name="-call-examples-noweb-intern">
		<ant target="-call-example">
			<property name="example" value="ldap" />
		</ant>
		<ant target="-call-example">
			<property name="example" value="movies" />
		</ant>
	</target>
	<target name="-call-examples-web-intern" if="do.web.deploy">
		<ant target="-call-example">
			<property name="example" value="dm-browser" />
		</ant>
		<ant target="-call-example">
			<property name="example" value="dm-search" />
		</ant>
		<ant target="-call-example">
			<property name="example" value="dm-topicmapviewer" />
		</ant>
		<ant target="-call-example">
			<property name="example" value="dm-web" />
		</ant>
		<ant target="-call-example">
			<property name="example" value="knoppixforum" />
		</ant>
		<ant target="-call-example">
			<property name="example" value="musicforum" />
		</ant>
	</target>
	<target name="-call-examples-both-intern">
		<ant target="-call-example">
			<property name="example" value="kompetenzstern" />
		</ant>
		<ant target="-call-example">
			<property name="example" value="messageboard" />
		</ant>
	</target>
	<target name="-call-external-apps">
		<!--
		<ant target="-call-external-app">
			<property name="app-dir" value="../kiezatlas" />
		</ant>
		-->
	</target>

	<target name="-call-example" depends="-config-ask-example,-testsyspass" if="do.example.execute">
		<echo>calling target "${target}" in example "${example}" ...</echo>
		<trycatch property="exceptionProp">
			<try>
				<ant antfile="build.xml" dir="${examples}/${example}" target="${target}" inheritall="false">
					<property name="do.dmdb.abort" value="${do.db.abort}" />
					<property name="db.syspass" value="${db.syspass}" />
					<property name="withsyspass" value="${withsyspass}" />
					<property name="configuration.isactive" value="${configuration.isactive}" />
				</ant>
			</try>
			<catch>
				<echo>${exceptionProp}</echo>
			</catch>
		</trycatch>
		<echo>finished target "${target}" in example "${example}"</echo>
	</target>

	<target name="-call-external-app" depends="-testsyspass">
		<echo>calling target "${target}" in extenal application "${app-dir}" ...</echo>
		<trycatch property="exceptionProp">
			<try>
				<ant antfile="build.xml" dir="${app-dir}" target="${target}" inheritall="false">
					<property name="do.dmdb.abort" value="${do.db.abort}" />
					<property name="db.syspass" value="${db.syspass}" />
					<property name="withsyspass" value="${withsyspass}" />
					<property name="configuration.isactive" value="${configuration.isactive}" />
				</ant>
			</try>
			<catch>
				<echo>${exceptionProp}</echo>
			</catch>
		</trycatch>
		<echo>finished target "${target}" in external application "${app-dir}"</echo>
	</target>

</project>
