<project name="DeepaMehta" default="-default" basedir=".">

	<description>
		DeepaMehta build file
	</description>

	<import file="config.xml" />

	<import file="${db-specific}/${db.create-db}" />
	<import file="${db-specific}/${db.drop-db}" />
	<target name="dropdb" depends="-dropdb"/>

	<import file="build-development.xml" optional="true"/>
	
	<path id="dmapps">
		<pathelement location="${examples}/movies/MoviesTopics.jar" />
		<!-- configure this -->
		<pathelement location="${examples}/messageboard/messageboard.jar" />
		<!-- configure this -->
		<pathelement location="${examples}/kompetenzstern/kompetenzstern.jar" />
		<!-- configure this -->
		<pathelement location="${appspath}/Kiez-Atlas/kiezatlas.jar" />
		<!-- configure this -->
		<pathelement location="${appspath}/TeenKom/teenkom.jar" />
		<!-- configure this -->
		<pathelement location="${appspath}/OLAP/olap.jar" />
		<!-- configure this -->
		<pathelement location="${appspath}/Importer/importer.jar" />
		<!-- configure this -->
		<pathelement location="${appspath}/DeepaMehta Coordination/coordination-platform.jar" />
		<!-- configure this -->
	</path>

	<target name="-default">
		<antcall target="${main-target}"></antcall>
	</target>
	
	<!-- Configuration -->

	<target name="config" depends="-config-web-root,-config-instance,-config-examples" description="Configures the application DeepaMehta">
		<propertyfile file="${config.properties}" >
			<entry key="main-target" default="dm"/>
		</propertyfile>
		<echo>
Your choices are stored in the "${config.properties}" file.
If you want to change the settings you have made please edit
this file or call the config target again.
		</echo>
	</target>
	<target name="-config-web">
		<condition property="old.do.installweb" value="n">
			<isfalse value="${web.deploy.do}"/>
		</condition>
		<condition property="old.do.installweb" value="y">
			<istrue value="${web.deploy.do}"/>
		</condition>
		<input
			message="Do you want to install web applications?"
			validargs="y,n"
			addproperty="new.do.installweb"
			defaultvalue="${old.do.installweb}"/>
		<condition property="new.web.deploy.do" value="false">
				<equals arg1="${new.do.installweb}" arg2="n" />
		</condition>
		<condition property="new.web.deploy.do" value="true">
			<not><equals arg1="${new.do.installweb}" arg2="n" /></not>
		</condition>
		<condition property="new.do.web.deploy">
			<istrue value="${new.web.deploy.do}" />
		</condition>
		<propertyfile file="${config.properties}" >
			<entry key="web.deploy.do" value="${new.web.deploy.do}"/>
		</propertyfile>
		<var name="do.web.deploy" unset="true"/>
		<condition property="do.web.deploy" value="true">
			<istrue value="${web.deploy.do}"/>
		</condition>
	</target>
	<target name="-config-web-root" if="new.do.web.deploy" depends="-config-web">
		<input
			message="Please enter the root directory of your application server."
			addproperty="new.tomcat.root"
			defaultvalue="${tomcat.root}"/>
		<propertyfile file="${config.properties}" >
			<entry key="tomcat.root" value="${new.tomcat.root}"/>
		</propertyfile>
	</target>
	<target name="-config-which-instance">
		<echo>Please select one of the following instance configurations:</echo>
		<echo/>
		<for param="list.instance.config.file">
			<path>
				<fileset dir="${config}" includes="dm-*.properties"/>
			</path>
			<sequential>
				<var name="list.instance" unset="true"/>
				<var name="list.dm-instance" unset="true"/>
				<basename file="@{list.instance.config.file}" property="list.dm-instance" suffix=".properties"/>
				<propertyregex property="list.instance"
	              input="${list.dm-instance}"
	              regexp="dm-(.*)"
	              select="\1"/>
				<echo>${list.instance}</echo>
			</sequential>
		</for>
		<echo/>
		<input
			message="currently set (default)"
			addproperty="new.dm.instance"
			defaultvalue="${dm.instance}"/>

		<fileset dir="${config}" includes="dm-${new.dm.instance}.properties" id="instance.config.fileset"/>
		<var name="correct" unset="true"/>
		<condition property="correct">
			<resourcecount refid="instance.config.fileset" when="equal" count="1" />
		</condition>
		<fail
			unless="correct"
			message="${new.dm.instance} does not refer to an instance configuration" />
		<propertyfile file="${config.properties}" >
			<entry key="dm.instance" value="${new.dm.instance}"/>
		</propertyfile>
	</target>
	<target name="-config-instance" depends="-config-which-instance">
		<echo>configuring now the DeepaMehta instance "${dm.instance}...</echo>
		<ant target="-config-instance2" inheritall="false"/>
	</target>
	<target name="-config-instance2" depends="-config-instance-db.host,-config-instance-db.name,-config-instance-db.user">
		<echo>completed configuring instance "${dm.instance}"</echo>
		<echo>Instance-related settings are stored in "${dm.instance.config-property-file}.</echo>
	</target>
	<target name="-config-instance-db.host" if="do.config.db.host">
		<input
			message="Please enter the host of your database:"
			addproperty="new.db.host"
			defaultvalue="${db.host}"/>
		<propertyfile file="${dm.instance.config-property-file}" >
			<entry key="db.host" value="${new.db.host}"/>
		</propertyfile>
	</target>
	<target name="-config-instance-db.name" if="do.config.db.name">
		<input
			message="Please enter the name of your database:"
			addproperty="new.db.name"
			defaultvalue="${db.name}"/>
		<propertyfile file="${dm.instance.config-property-file}" >
			<entry key="db.name" value="${new.db.name}"/>
		</propertyfile>
	</target>
	<target name="-config-instance-db.user" if="do.config.db.user">
		<echo>It is strongly advised to change the database user and password before creation!</echo>
		<input
			message="Please enter the user to use:"
			addproperty="new.db.user"
			defaultvalue="${db.user}"/>
		<input
			message="Please enter the password to use:"
			addproperty="new.db.password"
			defaultvalue="${db.password}"/>
		<propertyfile file="${dm.instance.config-property-file}" >
			<entry key="db.user" value="${new.db.user}"/>
			<entry key="db.password" value="${new.db.password}"/>
		</propertyfile>
	</target>
	<target name="-config-examples">
		<ant target="-call-examples">
			<property name="target" value="config"/>
		</ant>
	</target>

	<!-- Install -->

	<target name="install" description="initialises the database">
		<antcall target="-createdb" />
		<antcall target="-createtables" />
		<antcall target="-initdb" />
		<!-- example applications -->
		<antcall target="-installexamples" />
	</target>

	<!-- Movies -->
	<target name="dropmovies" depends="-testsyspass">
		<ant target="-call-example">
			<property name="example" value="movies"/>
			<property name="target" value="dropmoviesdb"/>
		</ant>
	</target>
	<target name="-installexamples" depends="-testsyspass">
		<ant target="-call-examples">
			<property name="target" value="install"/>
		</ant>
	</target>

	<!-- Web-related tasks -->
	<target name="-installweb-ask" depends="-config-web-root" unless="web.deploy.do"/>
	<target name="-installweb-unless" unless="do.web.deploy" depends="-installweb-ask">
		<echo>
=========================
Deployment not configured
=========================
Please run the config target if you want to have
your DeepaMehta installed into your tomcat.
		</echo>
	</target>
	<target name="-installweb-if" if="do.web.deploy" depends="-installweb-ask">
		<!-- copy shared libraries -->
		<antcall target="-deploylibs" />
		<copy todir="${web.lib.dir}" >
			<fileset dir="${dm.base-dir}">
				<include name="${db.libs}" />
			</fileset>
		</copy>
		<copy file="${libpath}/googleapi.jar" todir="${web.lib.dir}" />
		<copy file="${libpath}/commons-fileupload-1.0.jar" todir="${web.lib.dir}" />
		<!-- deploy web applications -->
		<ant target="-call-examples-web">
			<property name="target" value="deploy"/>
		</ant>
	</target>
	<target name="-installweb" depends="-installweb-if,-installweb-unless" />

	<target name="deploy" depends="-build-self,-installweb" description="Does everything to setup your Tomcat."/>

	<target name="-deploylibs" if="do.web.deploy">
		<copy file="${server}/DeepaMehtaService.jar" todir="${web.lib.dir}" />
		<copy file="${server}/DeepaMehtaTopics.jar" todir="${web.lib.dir}" />
	</target>

	<!-- The target createdb has been "outsourced" to ${db.create-db}-->
	<!-- The target dropdb has been "outsourced" to ${db.drop-db}-->

	<target name="-createtables">
		<sql driver="${db.driver}" url="${db.url}" userid="${db.user}" password="${db.password}" classpathref="javalibs" autocommit="${db.autocommit}">
			<fileset dir="${db-specific}">
				<include name="${db.tables}" />
			</fileset>
			<fileset dir="${db-specific}">
				<include name="${db.close-session}" />
			</fileset>
		</sql>
		<antcall target="-optimize" />
	</target>

	<target name="-optimize">
		<sql driver="${db.driver}" url="${db.url}" userid="${db.user}" password="${db.password}" classpathref="javalibs" autocommit="${db.autocommit}">
			<fileset dir="${db-specific}">
				<include name="${db.optimize}" />
			</fileset>
			<fileset dir="${db-specific}">
				<include name="${db.close-session}" />
			</fileset>
		</sql>
	</target>

	<target name="-initdb">
		<sql driver="${db.driver}" url="${db.url}" userid="${db.user}" password="${db.password}" classpathref="javalibs" autocommit="${db.autocommit}">
			<fileset dir="${db}">
				<include name="cm.sql" />
				<include name="email.sql" />
				<include name="auth.sql" />
				<include name="webcrawler.sql" />
				<include name="whois.sql" />
			</fileset>
			<fileset dir="${db-specific}">
				<include name="${db.close-session}" />
			</fileset>
		</sql>
		<sql driver="${db.driver}" url="${db.url}" userid="${db.user}" password="${db.password}" classpathref="javalibs" autocommit="${db.autocommit}">
			<fileset dir="${db}/patches">
				<include name="names.sql" />
				<include name="help.sql" />
			</fileset>
			<fileset dir="${db-specific}">
				<include name="${db.close-session}" />
			</fileset>
		</sql>
		<antcall target="-optimize" />
	</target>

	<target name="-droptables">
		<sql driver="${db.driver}" url="${db.url}" userid="${db.user}" password="${db.password}" classpathref="javalibs" autocommit="${db.autocommit}">
			<fileset dir="${db-specific}">
				<include name="${db.drop-tables}" />
			</fileset>
			<fileset dir="${db-specific}">
				<include name="${db.close-session}" />
			</fileset>
		</sql>
	</target>

	<target name="reset">
		<echo message="You are about to reset the database ${db.name} (user '${db.user}', password '${db.password}')." />
		<echo message="If you want reset another database, type 'n' and edit config.xml (section 'Database')" />
		<echo message="or use command line options -Ddb.name=... -Ddb.user=... -Ddb.password=..." />
		<input message="Continue? " validargs="y,n" addproperty="do.reset" />
		<condition property="do.abort">
			<equals arg1="${do.reset}" arg2="n" />
		</condition>
		<fail if="do.abort" message="==> Aborted by user -- revisit with 'ant [options] reset'" />
		<antcall target="droptables" />
		<antcall target="createtables" />
		<antcall target="initdb" />
	</target>

	<target name="patchdb">
		<echo message="You are about to apply the patch ${patch} the database ${db.name} (user '${db.user}', password '${db.password}')." />
		<echo message="If you want patch another database, type 'n' and edit config.xml (section 'Database')" />
		<echo message="or use command line options -Ddb.name=... -Ddb.user=... -Ddb.password=... -Dpatch=..." />
		<input message="Continue? " validargs="y,n" addproperty="do.patch" />
		<condition property="do.abort">
			<equals arg1="${do.patch}" arg2="n" />
		</condition>
		<fail if="do.abort" message="==> Aborted by user -- revisit with 'ant [options] patchdb'" />
		<sql driver="${db.driver}" url="${db.url}" userid="${db.user}" password="${db.password}" classpathref="javalibs" autocommit="${db.autocommit}">
			<fileset dir=".">
				<include name="${patch}" />
			</fileset>
			<fileset dir="${db-specific}">
				<include name="${db.close-session}" />
			</fileset>
		</sql>
		<antcall target="-optimize" />
	</target>

	<!-- Run -->

	<target name="dm" description="runs the monolithic DeepaMehta application, default instance">
		<java classname="de.deepamehta.service.DeepaMehta" dir="${client}" fork="true">
			<classpath>
				<pathelement location="${client}/DeepaMehta.jar" />
				<path refid="dmapps" />
				<path refid="javalibs" />
			</classpath>
			<sysproperty key="java.endorsed.dirs" path="${endorsedpath}" />
			<arg value="${dm.instance}" />
		</java>
	</target>

	<target name="dms" description="runs the DeepaMehta server">
		<java classname="de.deepamehta.service.DeepaMehtaServer" dir="${client}" fork="true">
			<classpath>
				<pathelement location="${server}/DeepaMehtaService.jar" />
				<pathelement location="${server}/DeepaMehtaTopics.jar" />
				<path refid="dmapps" />
				<path refid="javalibs" />
			</classpath>
			<sysproperty key="java.endorsed.dirs" path="${endorsedpath}" />
			<arg value="${dm.instance}" />
		</java>
	</target>

	<target name="dmc" description="runs the DeepaMehta client, connects to local server">
		<java classname="de.deepamehta.client.DeepaMehtaClient" dir="${client}" fork="true">
			<classpath>
				<pathelement location="${client}/DeepaMehtaClient.jar" />
			</classpath>
			<arg value="${dm.host}:${dm.port}" />
		</java>
	</target>

	<!-- Fix -->

	<target name="fixdb" description="fixes invalid HTML">
		<java classname="de.deepamehta.service.db.DBFix" dir="${client}" fork="true">
			<classpath>
				<pathelement location="${server}/DeepaMehtaService.jar" />
				<path refid="javalibs" />
			</classpath>
			<arg value="${dm.instance}" />
		</java>
	</target>

	<!-- Herlper Targets -->

	<target name="-testsyspass">
		<condition property="withsyspass" value="true">
			<isset property="db.syspass" />
		</condition>
	</target>

    <target name="-call-examples">
    	<antcall target="-call-examples-noweb"/>
    	<antcall target="-call-examples-web"/>
    </target>
	<target name="-call-examples-noweb">
		<ant target="-call-example">
			<property name="example" value="ldap"/>
		</ant>
		<ant target="-call-example">
			<property name="example" value="movies"/>
		</ant>
    </target>
	<target name="-call-examples-web">
		<ant target="-call-example">
			<property name="example" value="dm-browser"/>
		</ant>
		<ant target="-call-example">
			<property name="example" value="dm-search"/>
		</ant>
		<ant target="-call-example">
			<property name="example" value="dm-topicmapviewer"/>
		</ant>
		<ant target="-call-example">
			<property name="example" value="dm-web"/>
		</ant>
		<ant target="-call-example">
			<property name="example" value="knoppixforum"/>
		</ant>
		<ant target="-call-example">
			<property name="example" value="kompetenzstern"/>
		</ant>
		<ant target="-call-example">
			<property name="example" value="messageboard"/>
		</ant>
		<ant target="-call-example">
			<property name="example" value="musicforum"/>
		</ant>
    </target>
    <target name="-call-example">
    	<echo>calling target "${target}" in example "${example}"</echo>
		<trycatch>
			<try>
				<ant antfile="build.xml" dir="${examples}/${example}" target="${target}" inheritall="false">
					<property name="syspass" value="${db.syspass}" />
					<property name="withsyspass" value="${withsyspass}" />
				</ant>
			</try>
			<catch/>
		</trycatch>
    	<echo>finished target "${target}" in example "${example}"</echo>
	</target>

</project>
